@namespace LeoLang.Core
@classname LeoParser

@start methodDefinition

number<SyntaxNode> = value:("" [0-9]*) {SyntaxNode.CreateNumber(int.Parse(value))};
boolean<SyntaxNode> -public =  val:("true" / "false") { SyntaxNode.CreateBool(bool.Parse(val)) }
								

value<SyntaxNode> = boolean / number;

identifier<SyntaxNode> -public = id:("" ([a-zA-Z_][a-z_0-9]*)) {SyntaxNode.CreateID(id)};

variableDefinition<SyntaxNode> = "let" _ id:identifier _ "=" _ val:value {SyntaxNode.CreateVarDef(id, val)}
methodDefinition<SyntaxNode> -public = "meth" _ id:identifier "end meth" {SyntaxNode.CreateMethod(id, null, null)};		

whitespace = [\t ]
_ = whitespace+

EOL = '\n'
EOF = !.