@namespace LeoLang.Core
@classname LeoParser
@using LeoLang.Core.AST

@start methodDefinition

//Literals
numberLiteral<SyntaxNode> = value:("" [0-9]*) {SyntaxNode.CreateNumber(int.Parse(value))}
booleanLiteral<SyntaxNode> -public =  val:("true" / "false") { SyntaxNode.CreateBool(bool.Parse(val)) }
characterLiteral<SyntaxNode> -public = "'" c:("" [^']) "'" {SyntaxNode.CreateChar(c)}							

value<SyntaxNode> = booleanLiteral / numberLiteral / characterLiteral

identifier<IdentifierNode> -public = id:("" ([a-zA-Z_][a-zA-Z_0-9]*)) {SyntaxNode.CreateID(id)}

expression<SyntaxNode> = value//binaryExpression / value

variableDefinition<SyntaxNode> = "let" _ id:identifier _ "=" _ val:expression 
										{SyntaxNode.CreateVarDef(id, val)}
Block<SyntaxNode> = _? LCb _? block:StatementLine* _? RCb _? Semi
					{SyntaxNode.CreateBlock(block)}

Statement<SyntaxNode> = variableDefinition
StatementLine<SyntaxNode> = stmt:Statement Semi {stmt}

paramDef<SyntaxNode> = type:identifier _ name:identifier {SyntaxNode.CreateParameter(type, name)}
paramList<SyntaxNode> -memoize = paramDef / paramListVoid
paramListVoid<SyntaxNode> = "void" {null}

methodDefinition<SyntaxNode> -public = ret:identifier _ id:identifier LBr param:paramList RBr body:Block
										{SyntaxNode.CreateMethod(id, ret, param, body)}	

//Tokens
LBr = '('
RBr = ')'
LCb = '{'
RCb = '}'
Semi = ';'

whitespace = [\t ]
_ = whitespace+


EOL = '\n' / '\r' / '\r\n'
EOF = !.