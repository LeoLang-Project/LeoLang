@namespace LeoLang.Core.AST
@classname LeoParser
@using LeoLang.Core.AST
@using Loyc;
@using Loyc.Syntax;

@start CompilationUnit

CompilationUnitLine<LNode> = usingDeclaration  / enumDefinition / methodDefinition / structDeklaration / fieldDeklaration
CompilationUnit<LNode> -public = _o line:CompilationUnitLine* _o {SyntaxNode.CreateBlock(line)}

//Literals
integerLiteral<LNode> = value:("" [0-9]+) {SyntaxNode.CreateInteger(value)}
decimalLiteral<LNode> = value:("" [0-9]+ "." [0-9]+) {SyntaxNode.CreateDecimal(value)}
hexLiteral<LNode> = "0x" value:("" [0-9A-Za-z]+) {SyntaxNode.CreateHexInteger(value)}
binLiteral<LNode> = "0b" value:("" [01_]+) {SyntaxNode.CreateBinInteger(value)}
numberLiteral<LNode> = hexLiteral / binLiteral / decimalLiteral / integerLiteral
symbolLiteral<LNode> = ":" id:identifier {SyntaxNode.CreateSymbolLiteral(id)}

infixedSymbol<LNode> = sp:symbolPrefix? id:identifier ss:symbolSuffix<0, 2> {SyntaxNode.SetInfix(id, sp, ss)}
symbolPrefix<SymbolPrefix> = pre:("++" / "--" / "-" / "*" / "&") {SyntaxNode.GetSymbolPrefix(pre)}
symbolSuffix<SymbolSuffix> = suf:("++" / "--" / "?" / "[]" / "*") {SyntaxNode.GetSymbolSuffix(suf)}

booleanLiteral<LNode> =  val:("true" / "false") { SyntaxNode.CreateBool(val) }
characterLiteral<LNode> = "'" c:("" [^']) "'" {SyntaxNode.CreateChar(c)}							
stringLiteral<LNode> = '"' val:("" simpleDoubleQuotedCharacter*) '"' {SyntaxNode.CreateString(val)}

value<LNode> -memoize = booleanLiteral / characterLiteral / stringLiteral / defaultExpression / sizeOfExpression / numberLiteral / unparsedBlock / identifier / symbolLiteral

identifier<LNode> = id:("" ([a-zA-Z_][a-zA-Z_0-9]*)) {SyntaxNode.CreateID(id)}

expression<LNode> = binaryExpression / ternaryExpression/ value
unparsedBlock<LNode> -public = id:identifier _o LCb body:("" [^}]*) _o RCb _o
							{SyntaxNode.CreateUnparsedBlockExpression(id, body)}

usingDeclaration<LNode> -public = _o "using" _ ns:namespaceRule _o Semi
									{SyntaxNode.CreateUsing(ns)}

namespaceRule<LNode>
	= f:identifier "." s:namespaceRule {SyntaxNode.JoinNodes(f, s, '.')} / id:identifier

callExpression<LNode> -public = id:identifier _o LBr _o args:callparamlist _o RBr {SyntaxNode.CreateCall(id, args)}
callparamlist<IEnumerable<LNode>> = f:value _o "," _o s:callparamlist {SyntaxNode.Combine(f, s)} / v:value {SyntaxNode.Combine(v) }

fieldDeklaration<LNode> = mod:modifier _o "field" _o type:identifier _ id:infixedSymbol _ "=" _ val:expression _o Semi
								{SyntaxNode.CreateField(mod, type, id, val)}

structDeklaration<LNode> -public = mod:modifier _o "struct" _o id:identifier _o body:structBody
								{SyntaxNode.CreateStruct(mod, id, body)}
structBody<LNode> = f:fieldDeklaration* {SyntaxNode.CreateBlock(f)}								

binaryOperator<BinaryOperator> = "<=" {BinaryOperator.LessEq}
							   / ">=" {BinaryOperator.GreaterEq}
							   / "==" {BinaryOperator.Equal}
							   / "<" {BinaryOperator.Less}
							   / ">" {BinaryOperator.Greater};

binaryExpression<LNode> = lhs:value _o op:binaryOperator _o rhs:value {SyntaxNode.CreateBinary(lhs, op, rhs)}

ternaryExpression<LNode> -memoize = cond:binaryExpression _o "?" _o truePart:expression _o ":" _o falsePart:expression
										{SyntaxNode.CreateTernary(cond, truePart, falsePart)}
variableDefinition<LNode> = type:identifier _ id:infixedSymbol _ "=" _ val:expression 
										{SyntaxNode.CreateVarDef(type, id, val)}

Block<LNode> -public = _o LCb block:blockContent _o RCb _o Semi _o
					{block}

blockContent<LNode> = lines:(StatementLine / genericStatementBlock)* {SyntaxNode.CreateBlock(lines)}
	
parameterContent<LNode>
	= _o head:paramDef _o "," _o tail:parameterContent { SyntaxNode.CreateParameter(head).Concat(tail) }
	/ line:paramDef { SyntaxNode.CreateParameter(line) }


Statement<LNode> = goToStatement / callExpression / variableDefinition / returnStatement 
StatementLine<LNode> = _o stmt:Statement _o Semi _o {stmt}
genericStatementBlock<LNode> = name:identifier _o LBr _o expr:expression _o RBr body:Block {SyntaxNode.CreateStatement(name, expr, body)}

paramDef<LNode> = type:identifier array:"[]"? _ name:identifier {SyntaxNode.CreateParameter(type, name, array)}
paramList<LNode> -memoize = parameterContent / paramListVoid / unexpected:&. #error{ "LLC0003: Expected void got '" + unexpected + "'" }
paramListVoid<LNode> = "void" {null}

methodDefinition<LNode> = mod:modifier _o ret:infixedSymbol _ id:identifier LBr param:paramList RBr body:Block
										{SyntaxNode.CreateMethod(mod, id, ret, param, body)}	

enumDefinition<LNode> -public = mod:modifier _o "enum" _ id:identifier type:enumType? _ LCb _o body:enumLine* _o RCb Semi
									{SyntaxNode.CreateEnum(mod, id, type, body)}
enumType<LNode> = _o Colon _o id:identifier {id}
enumLine<LNode> = _o decl:enumFieldDeclaration _o Comma?
					   {decl}
enumFieldDeclaration<LNode> = enumFieldDefinition / id:identifier 
enumFieldDefinition<LNode> = id:identifier _o "=" _o val:enumValue {SyntaxNode.CreatePair(id, val)}
enumValue<LNode> = stringLiteral / characterLiteral / numberLiteral

defaultExpression<LNode> = "default" LBr id:identifier RBr {SyntaxNode.CreateDefault(id)}
										/ "default" {SyntaxNode.CreateDefault(null)}
sizeOfExpression<LNode> = "sizeof" LBr id:identifier RBr {SyntaxNode.CreateSizeOf(id)}

goToStatement<LNode> = "goto" _ id:identifier {SyntaxNode.CreateGoTo(id)}
returnStatement<LNode> = "return" _ expr:expression {SyntaxNode.CreateReturn(expr)} / "return" {SyntaxNode.CreateReturn(null)}

modifier<LNode> = mod:("public" / "private" / "shared")? {SyntaxNode.CreateModifier(mod)}

//Tokens
LBr -lexical = '('
RBr -lexical = ')'
LCb -lexical = '{'
RCb -lexical = '}'
Semi -lexical = ';'
Colon -lexical = ':'
Comma -lexical = ','

simpleDoubleQuotedCharacter
  = !('"' / "\\" / eolChar) char:. { @char }

whitespace = [\t ] / EOL
_ -memoize = (whitespace / EOL / comment)*
_o = _?

comment -memoize = singleLineComment / multiLineComment

singleLineComment -memoize -lexical = "//" (!eolChar .)*

multiLineComment -lexical  = "/*" (!"*/" .)* "*/"

eolChar = [\n\r\u2028\u2029]

EOL = '\n' / '\r' / '\r\n'
EOF = !.  / unexpected:&. #error{ "LLC0001: Unexpected '" + unexpected + "'" }